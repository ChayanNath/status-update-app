version: "3.8"

networks:
  app_network:
    driver: bridge

services:
  mongo_primary:
    container_name: mongo_primary
    image: mongo:latest
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0"]
    volumes:
      - mongo_primary:/data/db
    networks:
      - app_network

  mongo_secondary:
    container_name: mongo_secondary
    image: mongo:latest
    ports:
      - "27018:27017"
    command: ["mongod", "--replSet", "rs0"]
    volumes:
      - mongo_secondary:/data/db
    networks:
      - app_network

  mongo_arbiter:
    container_name: mongo_arbiter
    image: mongo:latest
    ports:
      - "27019:27017"
    command: ["mongod", "--replSet", "rs0"]
    volumes:
      - mongo_arbiter:/data/db
    networks:
      - app_network

  init_replica_set:
    image: mongo:latest
    container_name: init_replica_set
    depends_on:
      - mongo_primary
      - mongo_secondary
      - mongo_arbiter
    volumes:
      - ./init-replica-set.sh:/scripts/init-replica-set.sh
    entrypoint: ["bash", "/scripts/init-replica-set.sh"]
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    ports:
      - "5000:5000"
    environment:
      MONGO_URI: ${MONGO_URI}
      PORT: ${PORT}
      SECRET_KEY: ${SECRET_KEY}
      NODE_ENV: ${NODE_ENV}
      CLIENT_ORIGIN: ${CLIENT_ORIGIN}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    networks:
      - app_network
    depends_on:
      - mongo_primary
      - mongo_secondary
      - mongo_arbiter
      - init_replica_set

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - app_network

volumes:
  mongo_primary:
  mongo_secondary:
  mongo_arbiter:
